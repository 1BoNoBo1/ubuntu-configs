#!/bin/bash
# ============================================================
# Script : setup_restic_modern.sh
# Objectif : Installation moderne de restic avec backup adaptatif
# Usage : sudo ./setup_restic_modern.sh
# Compatibilité : Ubuntu ≥ 20.04 / Debian ≥ 11
# Auteur : Generated by Claude Code - 2025
# ============================================================

set -euo pipefail

# Variables de configuration
RESTIC_VERSION="0.16.4"
RESTIC_URL="https://github.com/restic/restic/releases/download/v${RESTIC_VERSION}/restic_${RESTIC_VERSION}_linux_amd64.bz2"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo_color() {
    echo -e "${2}${1}${NC}"
}

# -------- Fonctions utilitaires --------

verifier_root() {
    if [[ "$EUID" -ne 0 ]]; then
        echo_color "Erreur : ce script doit être exécuté en tant que root (sudo)." $RED
        exit 1
    fi
    if [[ -z "${SUDO_USER:-}" || "$SUDO_USER" = "root" ]]; then
        echo_color "Veuillez lancer ce script en tant qu'utilisateur normal via sudo." $RED
        exit 1
    fi
    UTILISATEUR="$SUDO_USER"
    DOSSIER_HOME="/home/$UTILISATEUR"
    echo_color "Configuration pour l'utilisateur: $UTILISATEUR" $BLUE
}

installer_restic() {
    echo_color "📦 Installation de restic v$RESTIC_VERSION..." $YELLOW

    # Télécharger restic
    cd /tmp
    wget -q "$RESTIC_URL" -O "restic_${RESTIC_VERSION}_linux_amd64.bz2"

    # Décompresser et installer
    bunzip2 "restic_${RESTIC_VERSION}_linux_amd64.bz2"
    chmod +x "restic_${RESTIC_VERSION}_linux_amd64"
    mv "restic_${RESTIC_VERSION}_linux_amd64" /usr/local/bin/restic

    # Vérifier l'installation
    if restic version >/dev/null 2>&1; then
        echo_color "✅ restic installé: $(restic version | head -1)" $GREEN
    else
        echo_color "❌ Échec de l'installation de restic" $RED
        exit 1
    fi
}

installer_outils_modernes() {
    echo_color "🔧 Installation des outils modernes CLI..." $YELLOW

    # Mise à jour des dépôts
    apt-get update -qq

    # Installation des outils essentiels
    local OUTILS=(
        "fzf"           # Fuzzy finder
        "ripgrep"       # Recherche rapide
        "fd-find"       # Find moderne
        "bat"           # Cat amélioré
        "exa"           # ls moderne
        "tree"          # Arborescence
        "htop"          # Monitoring système
        "ncdu"          # Analyseur d'espace disque
        "jq"            # JSON processor
    )

    for outil in "${OUTILS[@]}"; do
        if ! command -v "$outil" >/dev/null 2>&1; then
            echo_color "   Installation de $outil..." $CYAN
            apt-get install -y "$outil" >/dev/null 2>&1 || echo_color "   ⚠️ $outil non disponible" $YELLOW
        else
            echo_color "   ✅ $outil déjà installé" $GREEN
        fi
    done

    # Installation de zoxide (cd intelligent)
    if ! command -v zoxide >/dev/null 2>&1; then
        echo_color "   Installation de zoxide..." $CYAN
        curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash
        mv "$DOSSIER_HOME/.local/bin/zoxide" /usr/local/bin/ 2>/dev/null || true
    fi

    echo_color "✅ Outils modernes installés" $GREEN
}

creer_configuration_restic() {
    echo_color "⚙️ Configuration de restic..." $YELLOW

    local CONFIG_FILE="/etc/restic.conf"
    local SAUVEGARDE_DIR="$DOSSIER_HOME/SAUVEGARDE"

    # Générer un mot de passe aléatoirement sécurisé
    local RESTIC_PASSWORD=$(openssl rand -base64 32)

    # Créer le fichier de configuration
    cat > "$CONFIG_FILE" <<EOF
# Configuration Restic
# Généré automatiquement - $(date)

# Mot de passe du dépôt (généré aléatoirement)
RESTIC_PASSWORD="$RESTIC_PASSWORD"

# Répertoire de base pour les sauvegardes
SAUVEGARDE_DIR="$SAUVEGARDE_DIR"

# Répertoire du dépôt restic (adaptatif local/kDrive)
RESTIC_REPOSITORY="$SAUVEGARDE_DIR/restic-repo"

# Exclusions par défaut
RESTIC_EXCLUDE_FILE="/etc/restic_excludes.txt"

# Options de performance
RESTIC_COMPRESSION="auto"
RESTIC_PACK_SIZE="16"
EOF

    chmod 600 "$CONFIG_FILE"
    echo_color "✅ Configuration restic créée: $CONFIG_FILE" $GREEN

    # Créer le fichier d'exclusions
    cat > "/etc/restic_excludes.txt" <<'EOF'
# Exclusions pour restic
# Patterns optimisés pour un système moderne

# Caches système
/home/*/.cache
/home/*/.local/share/Trash
/var/cache
/tmp
/var/tmp

# Fichiers temporaires
*.tmp
*.temp
.DS_Store
Thumbs.db

# Répertoires de développement volumineux
/home/*/node_modules
/home/*/.npm
/home/*/.yarn
/home/*/target
/home/*/.cargo/registry

# Logs et données volatiles
/var/log
/home/*/.xsession-errors*

# Dépôts de sauvegarde eux-mêmes
*/restic-repo
*/backup
*/backups
EOF

    chmod 644 "/etc/restic_excludes.txt"
    echo_color "✅ Fichier d'exclusions créé: /etc/restic_excludes.txt" $GREEN
}

creer_scripts_restic() {
    echo_color "📜 Création des scripts restic..." $YELLOW

    # Script de sauvegarde
    cat > /usr/local/sbin/restic_backup.sh <<'EOS'
#!/bin/bash
set -euo pipefail

# Charger la configuration
if [ ! -f /etc/restic.conf ]; then
    echo "❌ Configuration restic manquante (/etc/restic.conf)"
    exit 1
fi

source /etc/restic.conf
export RESTIC_REPOSITORY RESTIC_PASSWORD

LOG="/var/log/restic_backup.log"

horodatage() { date '+%Y-%m-%d %H:%M:%S'; }

echo "$(horodatage) - Démarrage sauvegarde restic" >> "$LOG"

# Vérifier que le dépôt existe
if ! restic cat config >/dev/null 2>&1; then
    echo "$(horodatage) - Initialisation du dépôt restic" >> "$LOG"
    restic init >> "$LOG" 2>&1
fi

# Sauvegarde avec exclusions
restic backup /home /etc \
    --exclude-file="$RESTIC_EXCLUDE_FILE" \
    --tag "$(hostname)" \
    --tag "automatic" \
    >> "$LOG" 2>&1 || {
    echo "$(horodatage) - Erreur lors de la sauvegarde" >> "$LOG"
    exit 1
}

# Nettoyage des anciens snapshots
restic forget \
    --tag "$(hostname)" \
    --keep-daily 7 \
    --keep-weekly 4 \
    --keep-monthly 12 \
    --prune \
    >> "$LOG" 2>&1 || {
    echo "$(horodatage) - Erreur lors du nettoyage" >> "$LOG"
}

echo "$(horodatage) - Sauvegarde restic terminée" >> "$LOG"
EOS

    chmod 700 /usr/local/sbin/restic_backup.sh

    # Script de restauration
    cat > /usr/local/sbin/restic_restore.sh <<'EOS'
#!/bin/bash
set -euo pipefail

source /etc/restic.conf
export RESTIC_REPOSITORY RESTIC_PASSWORD

SNAPSHOT="${1:-latest}"
DEST="${2:-$HOME/restic-restore}"

if [[ "$SNAPSHOT" == "list" ]]; then
    echo "Snapshots disponibles:"
    restic snapshots
    exit 0
fi

echo "Restauration du snapshot: $SNAPSHOT"
echo "Destination: $DEST"

mkdir -p "$DEST"
restic restore "$SNAPSHOT" --target "$DEST"

echo "✅ Restauration terminée dans: $DEST"
EOS

    chmod 700 /usr/local/sbin/restic_restore.sh
    echo_color "✅ Scripts restic créés" $GREEN
}

creer_service_systemd_restic() {
    echo_color "🔧 Création du service systemd restic..." $YELLOW

    # Service de sauvegarde
    cat > /etc/systemd/system/restic-backup.service <<EOF
[Unit]
Description=Sauvegarde Restic automatique
Wants=network-online.target
After=network-online.target

[Service]
Type=oneshot
ExecStart=/usr/local/sbin/restic_backup.sh
Nice=19
IOSchedulingClass=idle
User=root
EOF

    # Timer de sauvegarde
    cat > /etc/systemd/system/restic-backup.timer <<EOF
[Unit]
Description=Planification sauvegarde Restic
Requires=restic-backup.service

[Timer]
OnCalendar=*-*-* 03:00:00
RandomizedDelaySec=15m
Persistent=true

[Install]
WantedBy=timers.target
EOF

    systemctl daemon-reload
    systemctl enable restic-backup.timer

    echo_color "✅ Service systemd restic configuré" $GREEN
}

creer_aliases_restic() {
    echo_color "🔗 Ajout des alias restic..." $YELLOW

    local ALIASES_FILE="$DOSSIER_HOME/.mon_shell/aliases.sh"

    # Ajouter les alias restic
    cat >> "$ALIASES_FILE" <<'EOF'

# ========== Restic Backup Management ==========
alias restic-backup-now='sudo systemctl start restic-backup.service'
alias restic-backup-log='sudo tail -n 50 /var/log/restic_backup.log'
alias restic-list='sudo restic snapshots'
alias restic-stats='sudo restic stats'
alias restic-check='sudo restic check'
alias restic-mount='sudo mkdir -p /mnt/restic && sudo restic mount /mnt/restic'
alias restic-umount='sudo umount /mnt/restic'
alias restic-restore='sudo /usr/local/sbin/restic_restore.sh'
alias restic-timer='systemctl status restic-backup.timer'

# Combinaisons pratiques
alias backup-status='restic-timer'
alias backup-now='restic-backup-now'
EOF

    chown "$UTILISATEUR":"$UTILISATEUR" "$ALIASES_FILE"
    echo_color "✅ Alias restic ajoutés" $GREEN
}

tester_installation() {
    echo_color "🧪 Test de l'installation restic..." $YELLOW

    # Test de la configuration
    source /etc/restic.conf
    export RESTIC_REPOSITORY RESTIC_PASSWORD

    # Initialiser le dépôt de test si nécessaire
    mkdir -p "$SAUVEGARDE_DIR/restic-repo"

    if ! restic cat config >/dev/null 2>&1; then
        echo_color "   Initialisation du dépôt de test..." $CYAN
        restic init >/dev/null 2>&1
    fi

    # Test simple
    echo "Test restic - $(date)" > /tmp/restic_test.txt
    if restic backup /tmp/restic_test.txt --tag test >/dev/null 2>&1; then
        echo_color "✅ Test de sauvegarde réussi" $GREEN

        # Nettoyage
        restic forget --tag test --prune >/dev/null 2>&1
        rm -f /tmp/restic_test.txt
    else
        echo_color "❌ Échec du test de sauvegarde" $RED
    fi
}

integrer_fzf() {
    echo_color "🔍 Intégration de fzf..." $YELLOW

    # Configuration fzf pour l'utilisateur
    local FZF_CONFIG="$DOSSIER_HOME/.fzf.bash"

    # Installer les bindings fzf
    if [[ ! -f "$FZF_CONFIG" ]]; then
        sudo -u "$UTILISATEUR" /usr/share/doc/fzf/examples/install --all --no-update-rc >/dev/null 2>&1 || true
    fi

    # Ajouter la configuration fzf au shell
    local FUNCTIONS_FILE="$DOSSIER_HOME/.mon_shell/functions_utils.sh"

    if ! grep -q "fzf" "$FUNCTIONS_FILE" 2>/dev/null; then
        cat >> "$FUNCTIONS_FILE" <<'EOF'

# ========== FZF Integration ==========
# Restic snapshot browser
restic_browser() {
    if ! command -v fzf >/dev/null; then
        echo_color "❌ fzf non installé" $ROUGE
        return 1
    fi

    source /etc/restic.conf 2>/dev/null || { echo "Config restic manquante"; return 1; }
    export RESTIC_REPOSITORY RESTIC_PASSWORD

    local snapshot=$(restic snapshots --json | jq -r '.[] | "\(.short_id) \(.time) \(.hostname) \(.tags // [])"' | fzf --prompt="Snapshot> ")

    if [[ -n "$snapshot" ]]; then
        local snap_id=$(echo "$snapshot" | awk '{print $1}')
        echo_color "Snapshot sélectionné: $snap_id" $VERT
        echo_color "Commandes disponibles:" $BLEU
        echo_color "  restic ls $snap_id" $NC
        echo_color "  restic restore $snap_id --target ~/restore/" $NC
    fi
}

# Log viewer avec fzf
backup_logs() {
    local log_file=$(echo -e "/var/log/restic_backup.log\n/var/log/restic_restore.log" | fzf --prompt="Log> ")
    if [[ -n "$log_file" ]]; then
        sudo tail -f "$log_file"
    fi
}
EOF
        chown "$UTILISATEUR":"$UTILISATEUR" "$FUNCTIONS_FILE"
        echo_color "✅ Intégration fzf ajoutée" $GREEN
    fi
}

afficher_resume() {
    echo_color "\n🎉 Installation moderne terminée!" $GREEN
    echo_color "\n📋 Composants installés:" $BLUE
    echo_color "   ✅ Restic v$RESTIC_VERSION" $NC
    echo_color "   ✅ Outils CLI modernes (fzf, ripgrep, bat, exa, etc.)" $NC
    echo_color "   ✅ Système de sauvegarde adaptatif" $NC
    echo_color "   ✅ Service systemd avec timer" $NC
    echo_color "   ✅ Intégration fzf" $NC

    echo_color "\n🚀 Commandes disponibles:" $BLUE
    echo_color "   restic-backup-now     - Sauvegarde manuelle" $NC
    echo_color "   restic-list           - Lister les snapshots" $NC
    echo_color "   restic-restore        - Restaurer un snapshot" $NC
    echo_color "   restic_browser        - Navigateur de snapshots (fzf)" $NC
    echo_color "   backup-status         - Statut service restic" $NC
    echo_color "   backup-now            - Sauvegarde restic immédiate" $NC

    echo_color "\n🔧 Configuration adaptative:" $BLUE
    echo_color "   kdrive_backup_prepare - Préparer l'environnement" $NC
    echo_color "   kdrive_switch_mode    - Basculer local/kDrive" $NC

    echo_color "\n⚠️ Important:" $YELLOW
    echo_color "   1. Rechargez votre shell: source ~/.zshrc" $NC
    echo_color "   2. Testez: restic-backup-now" $NC
    echo_color "   3. Le système s'adapte automatiquement (local ↔ kDrive)" $NC

    echo_color "\n🔐 Sécurité:" $BLUE
    echo_color "   - Configuration: /etc/restic.conf (600)" $NC
    echo_color "   - Mot de passe généré aléatoirement" $NC
    echo_color "   - Chiffrement AES-256" $NC
}

# --------- Exécution ---------
echo_color "🚀 Installation Restic + Outils Modernes" $BLUE
echo_color "==========================================" $BLUE

verifier_root
installer_restic
installer_outils_modernes
creer_configuration_restic
creer_scripts_restic
creer_service_systemd_restic
creer_aliases_restic
tester_installation
integrer_fzf
afficher_resume

echo_color "\n✨ Installation moderne terminée avec succès!" $GREEN
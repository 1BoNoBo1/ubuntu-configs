#!/usr/bin/env bash
# ============================================================
# Module : outils_multimedia.sh
# Objectif : Outils multim√©dia et fichiers pratiques
# Usage : source outils_multimedia.sh
# Style : Fonctions courtes, manipulation fichiers multim√©dia
# ============================================================

# Couleurs
VERT='\033[0;32m'
ROUGE='\033[0;31m'
JAUNE='\033[1;33m'
BLEU='\033[0;34m'
CYAN='\033[0;36m'
VIOLET='\033[0;35m'
NC='\033[0m'

dire_msg() {
    echo -e "${2:-$NC}$1${NC}"
}

# ========== INFORMATIONS FICHIERS ==========

info_image() {
    local fichier="$1"

    if [[ -z "$fichier" ]]; then
        dire_msg "‚ùå Usage: info_image <fichier>" $ROUGE
        return 1
    fi

    if [[ ! -f "$fichier" ]]; then
        dire_msg "‚ùå Fichier '$fichier' introuvable" $ROUGE
        return 1
    fi

    dire_msg "üñºÔ∏è INFORMATIONS IMAGE: $(basename "$fichier")" $BLEU
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

    # Informations de base
    local taille=$(stat -f%z "$fichier" 2>/dev/null || stat -c%s "$fichier" 2>/dev/null)
    local taille_mb=$(echo "scale=2; $taille / 1024 / 1024" | bc 2>/dev/null || echo "N/A")

    echo "üìÇ Fichier: $(basename "$fichier")"
    echo "üìè Taille: ${taille_mb}MB"

    # Utiliser file pour d√©tection type
    local type_fichier=$(file "$fichier" 2>/dev/null)
    echo "üè∑Ô∏è Type: $type_fichier"

    # Si identify (ImageMagick) disponible
    if command -v identify >/dev/null; then
        dire_msg "üìê D√©tails image:" $CYAN
        identify "$fichier" 2>/dev/null | while read ligne; do
            echo "   $ligne"
        done
    else
        dire_msg "üí° Installez ImageMagick pour plus de d√©tails" $JAUNE
    fi
}

info_video() {
    local fichier="$1"

    if [[ -z "$fichier" ]]; then
        dire_msg "‚ùå Usage: info_video <fichier>" $ROUGE
        return 1
    fi

    if [[ ! -f "$fichier" ]]; then
        dire_msg "‚ùå Fichier '$fichier' introuvable" $ROUGE
        return 1
    fi

    dire_msg "üé¨ INFORMATIONS VID√âO: $(basename "$fichier")" $BLEU
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

    # Informations de base
    local taille=$(stat -f%z "$fichier" 2>/dev/null || stat -c%s "$fichier" 2>/dev/null)
    local taille_mb=$(echo "scale=2; $taille / 1024 / 1024" | bc 2>/dev/null || echo "N/A")

    echo "üìÇ Fichier: $(basename "$fichier")"
    echo "üìè Taille: ${taille_mb}MB"

    # Si ffprobe (FFmpeg) disponible
    if command -v ffprobe >/dev/null; then
        dire_msg "üéØ D√©tails techniques:" $CYAN

        # Dur√©e
        local duree=$(ffprobe -v quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$fichier" 2>/dev/null)
        if [[ -n "$duree" ]]; then
            local minutes=$(echo "$duree / 60" | bc 2>/dev/null || echo "0")
            local secondes=$(echo "$duree % 60" | bc 2>/dev/null || echo "0")
            echo "   ‚è±Ô∏è Dur√©e: ${minutes}m ${secondes}s"
        fi

        # R√©solution
        local resolution=$(ffprobe -v quiet -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 "$fichier" 2>/dev/null)
        if [[ -n "$resolution" ]]; then
            echo "   üìê R√©solution: $resolution"
        fi

        # Codec
        local codec=$(ffprobe -v quiet -select_streams v:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 "$fichier" 2>/dev/null)
        if [[ -n "$codec" ]]; then
            echo "   üéûÔ∏è Codec: $codec"
        fi
    else
        dire_msg "üí° Installez FFmpeg pour plus de d√©tails" $JAUNE
    fi
}

info_audio() {
    local fichier="$1"

    if [[ -z "$fichier" ]]; then
        dire_msg "‚ùå Usage: info_audio <fichier>" $ROUGE
        return 1
    fi

    if [[ ! -f "$fichier" ]]; then
        dire_msg "‚ùå Fichier '$fichier' introuvable" $ROUGE
        return 1
    fi

    dire_msg "üéµ INFORMATIONS AUDIO: $(basename "$fichier")" $BLEU
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

    # Informations de base
    local taille=$(stat -f%z "$fichier" 2>/dev/null || stat -c%s "$fichier" 2>/dev/null)
    local taille_mb=$(echo "scale=2; $taille / 1024 / 1024" | bc 2>/dev/null || echo "N/A")

    echo "üìÇ Fichier: $(basename "$fichier")"
    echo "üìè Taille: ${taille_mb}MB"

    # Si ffprobe disponible
    if command -v ffprobe >/dev/null; then
        dire_msg "üéØ D√©tails techniques:" $CYAN

        # Dur√©e
        local duree=$(ffprobe -v quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$fichier" 2>/dev/null)
        if [[ -n "$duree" ]]; then
            local minutes=$(echo "$duree / 60" | bc 2>/dev/null || echo "0")
            local secondes=$(echo "$duree % 60" | bc 2>/dev/null || echo "0")
            echo "   ‚è±Ô∏è Dur√©e: ${minutes}m ${secondes}s"
        fi

        # Codec audio
        local codec=$(ffprobe -v quiet -select_streams a:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 "$fichier" 2>/dev/null)
        if [[ -n "$codec" ]]; then
            echo "   üéº Codec: $codec"
        fi

        # Bitrate
        local bitrate=$(ffprobe -v quiet -select_streams a:0 -show_entries stream=bit_rate -of default=noprint_wrappers=1:nokey=1 "$fichier" 2>/dev/null)
        if [[ -n "$bitrate" && "$bitrate" != "N/A" ]]; then
            local bitrate_kb=$(echo "scale=0; $bitrate / 1000" | bc 2>/dev/null || echo "N/A")
            echo "   üéöÔ∏è Bitrate: ${bitrate_kb} kbps"
        fi
    else
        dire_msg "üí° Installez FFmpeg pour plus de d√©tails" $JAUNE
    fi
}

# ========== CONVERSIONS SIMPLES ==========

convertir_image() {
    local source="$1"
    local format="$2"

    if [[ -z "$source" ]] || [[ -z "$format" ]]; then
        dire_msg "‚ùå Usage: convertir_image <fichier> <format>" $ROUGE
        dire_msg "üí° Formats: jpg, png, webp, gif" $CYAN
        return 1
    fi

    if [[ ! -f "$source" ]]; then
        dire_msg "‚ùå Fichier '$source' introuvable" $ROUGE
        return 1
    fi

    if ! command -v convert >/dev/null; then
        dire_msg "‚ùå ImageMagick non install√©" $ROUGE
        dire_msg "üí° Installez avec: sudo apt install imagemagick" $CYAN
        return 1
    fi

    local nom_base="${source%.*}"
    local destination="${nom_base}.${format}"

    dire_msg "üîÑ Conversion: $(basename "$source") ‚Üí $(basename "$destination")" $CYAN

    if convert "$source" "$destination" 2>/dev/null; then
        dire_msg "‚úÖ Conversion r√©ussie: $destination" $VERT
    else
        dire_msg "‚ùå √âchec de la conversion" $ROUGE
    fi
}

redimensionner_image() {
    local source="$1"
    local taille="$2"

    if [[ -z "$source" ]] || [[ -z "$taille" ]]; then
        dire_msg "‚ùå Usage: redimensionner_image <fichier> <taille>" $ROUGE
        dire_msg "üí° Exemples: 800x600, 50%, 1920x1080" $CYAN
        return 1
    fi

    if [[ ! -f "$source" ]]; then
        dire_msg "‚ùå Fichier '$source' introuvable" $ROUGE
        return 1
    fi

    if ! command -v convert >/dev/null; then
        dire_msg "‚ùå ImageMagick non install√©" $ROUGE
        return 1
    fi

    local nom_base="${source%.*}"
    local extension="${source##*.}"
    local destination="${nom_base}_${taille}.${extension}"

    dire_msg "üìè Redimensionnement: $(basename "$source") ‚Üí $taille" $CYAN

    if convert "$source" -resize "$taille" "$destination" 2>/dev/null; then
        dire_msg "‚úÖ Image redimensionn√©e: $destination" $VERT
    else
        dire_msg "‚ùå √âchec du redimensionnement" $ROUGE
    fi
}

# ========== OUTILS PDF ==========

info_pdf() {
    local fichier="$1"

    if [[ -z "$fichier" ]]; then
        dire_msg "‚ùå Usage: info_pdf <fichier.pdf>" $ROUGE
        return 1
    fi

    if [[ ! -f "$fichier" ]]; then
        dire_msg "‚ùå Fichier '$fichier' introuvable" $ROUGE
        return 1
    fi

    dire_msg "üìÑ INFORMATIONS PDF: $(basename "$fichier")" $BLEU
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

    # Taille fichier
    local taille=$(stat -f%z "$fichier" 2>/dev/null || stat -c%s "$fichier" 2>/dev/null)
    local taille_mb=$(echo "scale=2; $taille / 1024 / 1024" | bc 2>/dev/null || echo "N/A")
    echo "üìè Taille: ${taille_mb}MB"

    # Si pdfinfo disponible
    if command -v pdfinfo >/dev/null; then
        dire_msg "üìã D√©tails:" $CYAN
        pdfinfo "$fichier" 2>/dev/null | grep -E "(Pages|Title|Author|Creator|Producer)" | while read ligne; do
            echo "   $ligne"
        done
    else
        dire_msg "üí° Installez poppler-utils pour plus de d√©tails" $JAUNE
    fi
}

fusionner_pdf() {
    if [[ $# -lt 2 ]]; then
        dire_msg "‚ùå Usage: fusionner_pdf <fichier1.pdf> <fichier2.pdf> [...]" $ROUGE
        return 1
    fi

    local fichier_sortie="fusion_$(date +%Y%m%d_%H%M%S).pdf"

    # V√©rifier que tous les fichiers existent
    for fichier in "$@"; do
        if [[ ! -f "$fichier" ]]; then
            dire_msg "‚ùå Fichier '$fichier' introuvable" $ROUGE
            return 1
        fi
    done

    if command -v pdftk >/dev/null; then
        dire_msg "üîó Fusion de $# fichiers PDF..." $CYAN
        if pdftk "$@" cat output "$fichier_sortie" 2>/dev/null; then
            dire_msg "‚úÖ Fusion r√©ussie: $fichier_sortie" $VERT
        else
            dire_msg "‚ùå √âchec de la fusion" $ROUGE
        fi
    elif command -v gs >/dev/null; then
        dire_msg "üîó Fusion avec Ghostscript..." $CYAN
        if gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="$fichier_sortie" "$@" 2>/dev/null; then
            dire_msg "‚úÖ Fusion r√©ussie: $fichier_sortie" $VERT
        else
            dire_msg "‚ùå √âchec de la fusion" $ROUGE
        fi
    else
        dire_msg "‚ùå Outil de fusion PDF non trouv√©" $ROUGE
        dire_msg "üí° Installez pdftk ou ghostscript" $CYAN
    fi
}

# ========== NETTOYAGE MULTIM√âDIA ==========

nettoyer_multimedia() {
    local dossier="${1:-.}"

    dire_msg "üßπ NETTOYAGE FICHIERS MULTIM√âDIA" $BLEU
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

    dire_msg "üìÅ Dossier: $dossier" $CYAN

    local nettoye=0

    # Fichiers temporaires courants
    for pattern in "*.tmp" "Thumbs.db" ".DS_Store" "*.part" "*.crdownload"; do
        while IFS= read -r -d '' fichier; do
            rm -f "$fichier" && {
                dire_msg "üóëÔ∏è Supprim√©: $(basename "$fichier")" $JAUNE
                ((nettoye++))
            }
        done < <(find "$dossier" -name "$pattern" -type f -print0 2>/dev/null)
    done

    # Doublons d'images (d√©tection simple par taille)
    if command -v fdupes >/dev/null; then
        dire_msg "üîç Recherche de doublons..." $CYAN
        local doublons=$(fdupes -r "$dossier" 2>/dev/null | wc -l)
        if [[ $doublons -gt 0 ]]; then
            dire_msg "‚ö†Ô∏è $doublons groupes de doublons trouv√©s" $JAUNE
            dire_msg "üí° Utilisez 'fdupes -r $dossier' pour les voir" $CYAN
        fi
    fi

    if [[ $nettoye -eq 0 ]]; then
        dire_msg "‚úÖ Dossier d√©j√† propre" $VERT
    else
        dire_msg "‚úÖ $nettoye fichiers nettoy√©s" $VERT
    fi
}

# ========== RECHERCHE MULTIM√âDIA ==========

chercher_multimedia() {
    local terme="$1"
    local dossier="${2:-.}"

    if [[ -z "$terme" ]]; then
        dire_msg "‚ùå Usage: chercher_multimedia <terme> [dossier]" $ROUGE
        return 1
    fi

    dire_msg "üîç Recherche multim√©dia: '$terme' dans $dossier" $CYAN
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

    # Extensions multim√©dia communes
    local extensions=("jpg" "jpeg" "png" "gif" "webp" "mp4" "avi" "mkv" "mov" "mp3" "wav" "flac" "ogg" "pdf")

    for ext in "${extensions[@]}"; do
        while IFS= read -r -d '' fichier; do
            dire_msg "üìÑ $fichier" $VERT
        done < <(find "$dossier" -iname "*$terme*.$ext" -type f -print0 2>/dev/null)
    done
}

# ========== ALIASES ==========

alias img-info='info_image'
alias vid-info='info_video'
alias audio-info='info_audio'
alias pdf-info='info_pdf'
alias convertir-img='convertir_image'
alias redim='redimensionner_image'
alias fusionner='fusionner_pdf'
alias nettoyer-media='nettoyer_multimedia'
alias chercher-media='chercher_multimedia'

# ========== AIDE ==========

aide_multimedia() {
    dire_msg "üé® OUTILS MULTIM√âDIA" $BLEU
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo
    dire_msg "üìã Informations:" $CYAN
    echo "  img-info <fichier>      # Infos image"
    echo "  vid-info <fichier>      # Infos vid√©o"
    echo "  audio-info <fichier>    # Infos audio"
    echo "  pdf-info <fichier>      # Infos PDF"
    echo
    dire_msg "üîÑ Conversions:" $CYAN
    echo "  convertir-img <fichier> <format>  # Convertir image"
    echo "  redim <fichier> <taille>          # Redimensionner image"
    echo "  fusionner <pdf1> <pdf2> ...       # Fusionner PDFs"
    echo
    dire_msg "üßπ Maintenance:" $CYAN
    echo "  nettoyer-media [dossier]          # Nettoyer fichiers"
    echo "  chercher-media <terme> [dossier]  # Rechercher fichiers"
    echo
    dire_msg "üí° Exemples:" $JAUNE
    echo "  img-info photo.jpg"
    echo "  convertir-img image.png jpg"
    echo "  redim photo.jpg 800x600"
    echo "  fusionner doc1.pdf doc2.pdf"
}

alias aide-multimedia='aide_multimedia'

dire_msg "‚úÖ Outils multim√©dia charg√©s" $VERT
dire_msg "üí° Tapez 'aide-multimedia' pour voir toutes les commandes" $CYAN
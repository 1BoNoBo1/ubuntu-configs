#!/bin/bash
# ============================================================
# Script : enhance_ubuntu_geek.sh
# Objectif : Transformation complète Ubuntu → Système Geek
# Usage : sudo ./enhance_ubuntu_geek.sh
# Compatibilité : Ubuntu ≥ 20.04 / Debian ≥ 11
# Auteur : Generated by Claude Code - 2025
# ============================================================

set -euo pipefail

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

echo_color() {
    echo -e "${2}${1}${NC}"
}

# -------- Variables de configuration --------

UTILISATEUR="${SUDO_USER:-$(logname)}"
DOSSIER_HOME="/home/$UTILISATEUR"
UBUNTU_CONFIGS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# -------- Fonctions de vérification --------

verifier_prerequis() {
    echo_color "🔍 Vérification des prérequis..." $BLUE

    if [[ "$EUID" -ne 0 ]]; then
        echo_color "❌ Ce script doit être exécuté avec sudo" $RED
        exit 1
    fi

    if [[ -z "$UTILISATEUR" || "$UTILISATEUR" = "root" ]]; then
        echo_color "❌ Utilisateur non détecté correctement" $RED
        exit 1
    fi

    echo_color "✅ Utilisateur: $UTILISATEUR" $GREEN
    echo_color "✅ Répertoire ubuntu-configs: $UBUNTU_CONFIGS_DIR" $GREEN
}

# -------- Phase 1: Système de base --------

mettre_a_jour_systeme() {
    echo_color "\n📦 Phase 1: Mise à jour du système..." $YELLOW

    apt-get update -qq
    apt-get upgrade -y
    apt-get autoremove --purge -y
    apt-get autoclean

    echo_color "✅ Système mis à jour" $GREEN
}

installer_outils_essentiels() {
    echo_color "\n🔧 Installation des outils essentiels..." $CYAN

    local OUTILS_ESSENTIELS=(
        # Développement
        "git" "vim" "neovim" "curl" "wget" "build-essential"
        # Système
        "htop" "iotop" "nethogs" "tree" "ncdu" "tmux" "screen"
        # Réseau
        "nmap" "netcat" "traceroute" "mtr" "tcpdump"
        # Archives
        "zip" "unzip" "p7zip-full" "rar" "unrar"
        # Monitoring
        "lm-sensors" "smartmontools" "sysstat"
        # Sécurité
        "fail2ban" "ufw" "rkhunter" "chkrootkit"
    )

    for outil in "${OUTILS_ESSENTIELS[@]}"; do
        if ! dpkg -l | grep -q "^ii  $outil "; then
            echo_color "   📥 Installation de $outil..." $BLUE
            apt-get install -y "$outil" >/dev/null 2>&1 || echo_color "   ⚠️ $outil non disponible" $YELLOW
        fi
    done

    echo_color "✅ Outils essentiels installés" $GREEN
}

# -------- Phase 2: Shell moderne --------

configurer_shell_moderne() {
    echo_color "\n🐚 Phase 2: Configuration du shell moderne..." $YELLOW

    # Installation de Oh My Zsh si nécessaire
    if [[ ! -d "$DOSSIER_HOME/.oh-my-zsh" ]]; then
        echo_color "   📥 Installation Oh My Zsh..." $BLUE
        sudo -u "$UTILISATEUR" sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh --unattended)" || true
    fi

    # Installation de Starship (prompt moderne)
    if ! command -v starship >/dev/null 2>&1; then
        echo_color "   ⭐ Installation Starship..." $BLUE
        curl -sS https://starship.rs/install.sh | sh -s -- --yes >/dev/null 2>&1
    fi

    # Plugins ZSH essentiels
    local ZSH_CUSTOM="$DOSSIER_HOME/.oh-my-zsh/custom"

    # zsh-autosuggestions
    if [[ ! -d "$ZSH_CUSTOM/plugins/zsh-autosuggestions" ]]; then
        echo_color "   💡 Installation zsh-autosuggestions..." $BLUE
        sudo -u "$UTILISATEUR" git clone https://github.com/zsh-users/zsh-autosuggestions "$ZSH_CUSTOM/plugins/zsh-autosuggestions" >/dev/null 2>&1
    fi

    # zsh-syntax-highlighting
    if [[ ! -d "$ZSH_CUSTOM/plugins/zsh-syntax-highlighting" ]]; then
        echo_color "   🌈 Installation zsh-syntax-highlighting..." $BLUE
        sudo -u "$UTILISATEUR" git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$ZSH_CUSTOM/plugins/zsh-syntax-highlighting" >/dev/null 2>&1
    fi

    echo_color "✅ Shell moderne configuré" $GREEN
}

# -------- Phase 3: Outils CLI modernes --------

installer_outils_cli_modernes() {
    echo_color "\n🚀 Phase 3: Outils CLI modernes..." $YELLOW

    # Via apt (si disponibles)
    local OUTILS_APT=("fzf" "ripgrep" "fd-find" "bat" "exa" "jq")
    for outil in "${OUTILS_APT[@]}"; do
        if ! command -v "$outil" >/dev/null 2>&1; then
            echo_color "   📥 Installation $outil..." $BLUE
            apt-get install -y "$outil" >/dev/null 2>&1 || true
        fi
    done

    # zoxide (cd intelligent)
    if ! command -v zoxide >/dev/null 2>&1; then
        echo_color "   🧭 Installation zoxide..." $BLUE
        curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash
        mv "$DOSSIER_HOME/.local/bin/zoxide" /usr/local/bin/ 2>/dev/null || true
    fi

    # delta (diff amélioré)
    if ! command -v delta >/dev/null 2>&1; then
        echo_color "   📊 Installation delta..." $BLUE
        local DELTA_VERSION="0.16.5"
        wget -q "https://github.com/dandavison/delta/releases/download/${DELTA_VERSION}/git-delta_${DELTA_VERSION}_amd64.deb" -O /tmp/delta.deb
        dpkg -i /tmp/delta.deb >/dev/null 2>&1 || true
        rm -f /tmp/delta.deb
    fi

    # lazygit (Git TUI)
    if ! command -v lazygit >/dev/null 2>&1; then
        echo_color "   🦥 Installation lazygit..." $BLUE
        local LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
        wget -q "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz" -O /tmp/lazygit.tar.gz
        tar -xzf /tmp/lazygit.tar.gz -C /tmp
        mv /tmp/lazygit /usr/local/bin/
        rm -f /tmp/lazygit.tar.gz
    fi

    echo_color "✅ Outils CLI modernes installés" $GREEN
}

# -------- Phase 4: Développement --------

configurer_environnement_dev() {
    echo_color "\n💻 Phase 4: Environnement de développement..." $YELLOW

    # Node.js via NodeSource
    if ! command -v node >/dev/null 2>&1; then
        echo_color "   📦 Installation Node.js..." $BLUE
        curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
        apt-get install -y nodejs >/dev/null 2>&1
    fi

    # Python tools
    if ! command -v pip3 >/dev/null 2>&1; then
        apt-get install -y python3-pip >/dev/null 2>&1
    fi

    # Docker si pas déjà installé
    if ! command -v docker >/dev/null 2>&1; then
        echo_color "   🐳 Installation Docker..." $BLUE
        curl -fsSL https://get.docker.com -o get-docker.sh
        sh get-docker.sh >/dev/null 2>&1
        usermod -aG docker "$UTILISATEUR"
        rm get-docker.sh
    fi

    # Docker Compose
    if ! command -v docker-compose >/dev/null 2>&1; then
        echo_color "   🐙 Installation Docker Compose..." $BLUE
        local COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d'"' -f4)
        curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
    fi

    echo_color "✅ Environnement de développement configuré" $GREEN
}

# -------- Phase 5: Sécurité --------

configurer_securite() {
    echo_color "\n🔒 Phase 5: Configuration sécurisée..." $YELLOW

    # Configuration UFW
    echo_color "   🛡️ Configuration UFW..." $BLUE
    ufw --force reset >/dev/null 2>&1
    ufw default deny incoming >/dev/null 2>&1
    ufw default allow outgoing >/dev/null 2>&1
    ufw allow ssh >/dev/null 2>&1
    ufw --force enable >/dev/null 2>&1

    # Configuration SSH sécurisée
    if [[ -f "/etc/ssh/sshd_config" ]]; then
        echo_color "   🔑 Sécurisation SSH..." $BLUE
        cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup

        # Améliorer la sécurité SSH
        sed -i 's/#PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
        sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
        sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config

        # Redémarrer SSH si possible
        systemctl reload ssh 2>/dev/null || true
    fi

    # Configuration Fail2Ban
    if command -v fail2ban-server >/dev/null 2>&1; then
        echo_color "   🚫 Configuration Fail2Ban..." $BLUE
        cat > /etc/fail2ban/jail.local <<EOF
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 3

[sshd]
enabled = true
port = ssh
filter = sshd
logpath = /var/log/auth.log
maxretry = 3
EOF
        systemctl enable fail2ban >/dev/null 2>&1
        systemctl restart fail2ban >/dev/null 2>&1
    fi

    echo_color "✅ Sécurité configurée" $GREEN
}

# -------- Phase 6: Intégration finale --------

integrer_configurations() {
    echo_color "\n🔧 Phase 6: Intégration des configurations..." $YELLOW

    # Exécuter les scripts de configuration spécifiques
    local SCRIPTS_A_EXECUTER=(
        "setup_webdav_kdrive.sh"
        "setup_restic_modern.sh"
    )

    for script in "${SCRIPTS_A_EXECUTER[@]}"; do
        if [[ -f "$UBUNTU_CONFIGS_DIR/$script" ]]; then
            echo_color "   🔄 Exécution de $script..." $BLUE
            cd "$UBUNTU_CONFIGS_DIR"
            chmod +x "$script"
            ./"$script" || echo_color "   ⚠️ Échec de $script (continuant...)" $YELLOW
        fi
    done

    # Mise à jour du .zshrc avec les plugins modernes
    local ZSHRC="$DOSSIER_HOME/.zshrc"
    if [[ -f "$ZSHRC" ]]; then
        echo_color "   ⚙️ Mise à jour .zshrc..." $BLUE

        # Ajouter les plugins modernes
        sed -i 's/plugins=(git)/plugins=(git zsh-autosuggestions zsh-syntax-highlighting)/' "$ZSHRC"

        # Ajouter la configuration Starship
        if ! grep -q "starship init" "$ZSHRC"; then
            echo 'eval "$(starship init zsh)"' >> "$ZSHRC"
        fi

        # Ajouter zoxide
        if ! grep -q "zoxide init" "$ZSHRC"; then
            echo 'eval "$(zoxide init zsh)"' >> "$ZSHRC"
        fi

        chown "$UTILISATEUR":"$UTILISATEUR" "$ZSHRC"
    fi

    echo_color "✅ Configurations intégrées" $GREEN
}

# -------- Phase 7: Nettoyage et optimisations --------

optimiser_systeme() {
    echo_color "\n⚡ Phase 7: Optimisations système..." $YELLOW

    # Nettoyer les packages
    apt-get autoremove --purge -y >/dev/null 2>&1
    apt-get autoclean >/dev/null 2>&1

    # Optimiser les performances
    echo_color "   🚀 Optimisations de performance..." $BLUE

    # Configuration swappiness (SSD-friendly)
    echo 'vm.swappiness=10' > /etc/sysctl.d/99-swappiness.conf

    # Configuration réseau
    cat > /etc/sysctl.d/99-network.conf <<EOF
# Optimisations réseau
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.ipv4.tcp_rmem = 4096 65536 16777216
net.ipv4.tcp_wmem = 4096 65536 16777216
EOF

    # Appliquer les changements
    sysctl -p /etc/sysctl.d/99-*.conf >/dev/null 2>&1 || true

    echo_color "✅ Système optimisé" $GREEN
}

# -------- Fonction finale --------

afficher_resume_final() {
    echo_color "\n🎉 TRANSFORMATION UBUNTU → GEEK TERMINÉE!" $GREEN
    echo_color "==============================================" $GREEN

    echo_color "\n📦 Composants installés:" $BLUE
    echo_color "   ✅ Système de base mis à jour" $NC
    echo_color "   ✅ Outils essentiels (htop, nmap, tmux, etc.)" $NC
    echo_color "   ✅ Shell moderne (Oh My Zsh + plugins + Starship)" $NC
    echo_color "   ✅ CLI moderne (fzf, ripgrep, bat, exa, zoxide, etc.)" $NC
    echo_color "   ✅ Environnement dev (Node.js, Docker, Python)" $NC
    echo_color "   ✅ Sécurité (UFW, Fail2Ban, SSH durci)" $NC
    echo_color "   ✅ WebDAV kDrive (adaptable)" $NC
    echo_color "   ✅ Restic (backup moderne)" $NC

    echo_color "\n🚀 Nouvelles commandes disponibles:" $BLUE
    echo_color "   🔍 Recherche: rg, fd, fzf" $NC
    echo_color "   📁 Navigation: exa, tree, zoxide (z)" $NC
    echo_color "   📊 Monitoring: htop, ncdu, lazygit" $NC
    echo_color "   💾 Backup: restic-*, borg-*, kdrive_*" $NC
    echo_color "   🛡️ Sécurité: ufw, fail2ban, rkhunter" $NC

    echo_color "\n⚡ Actions recommandées:" $YELLOW
    echo_color "   1. Redémarrez votre session ou exécutez: source ~/.zshrc" $NC
    echo_color "   2. Configurez vos clés SSH: ssh-keygen -t ed25519" $NC
    echo_color "   3. Testez les sauvegardes: restic-backup-now" $NC
    echo_color "   4. Explorez fzf: Ctrl+R (historique), Ctrl+T (fichiers)" $NC

    echo_color "\n🔧 Configuration post-installation:" $BLUE
    echo_color "   📱 kDrive: Configurez vos credentials quand disponible" $NC
    echo_color "   🔑 SSH: Ajoutez vos clés publiques aux services" $NC
    echo_color "   🐳 Docker: Reconnectez-vous pour utiliser sans sudo" $NC
    echo_color "   ⭐ Starship: Personnalisez ~/.config/starship.toml" $NC

    echo_color "\n📚 Documentation:" $BLUE
    echo_color "   - README.md: Utilisation générale" $NC
    echo_color "   - README_WebDAV.md: Configuration kDrive" $NC
    echo_color "   - CLAUDE.md: Architecture complète" $NC

    echo_color "\n✨ Votre Ubuntu est maintenant un système de geek professionnel!" $MAGENTA
    echo_color "   Profitez de votre environnement moderne et sécurisé! 🚀" $CYAN
}

# -------- Exécution principale --------

main() {
    echo_color "🚀 ENHANCEMENT UBUNTU → SYSTÈME GEEK" $MAGENTA
    echo_color "====================================" $MAGENTA
    echo_color "Transformation complète de votre Ubuntu en système geek moderne\n" $CYAN

    verifier_prerequis
    mettre_a_jour_systeme
    installer_outils_essentiels
    configurer_shell_moderne
    installer_outils_cli_modernes
    configurer_environnement_dev
    configurer_securite
    integrer_configurations
    optimiser_systeme
    afficher_resume_final
}

# Lancement du script
main "$@"